<div class="full-wrapper header-text">
  <div class="grid-wrapper">
    <div id="header-text">
      <div> <span>Name of video </span><a href="#">Watch</a> </div>
    </div><!-- end #header-text section -->
  </div><!-- end .grid-wrapper section -->
</div><!-- end .full-wrapper .header-text section -->

<div class="full-wrapper">
  <div id="vid-wrapper">

    <div class="darkern">
      <div class="video-holder">                   
        <div class="vid-holder">
          <video id="video" class="video-js vjs-default-skin" width="100%" height="100%"
                 controls preload="auto" 
                 data-setup=''
                 poster="" src="">
          </video><!-- video-holder -->
        </div><!-- vid-holder -->
      </div><!-- video-holder -->
    </div><!-- end .darkern section -->
    <div class="headr-text"><h2>(Information Header Text)</h2></div><!-- header info text -->
    <div class="playlist-components">

      <div class="playlist">
        <ul>
        </ul>
      </div>

      <div class="button-holder">
        <%= image_tag("prev.png",:id => "prev",:alt=>"Previous video") %>
        <%= image_tag("next.png",:id => "next",:alt=>"Next video") %>
      </div>
      <!-- playlist-components -->


    </div><!-- vid-wrapper -->        
  </div><!-- end .full-wrapper .landing-content section -->

  <div></div><!-- end section -->

  <!-- Load Javascript -->
  <script type="text/javascript" src="/assets/video.js"></script> 
  <script type="text/javascript" src="/assets/videojs-playlists.js"></script> 
  <script>
    (function($) {

      // video playlists
      var videos = [
        {
          src: [
            '<%= @video.video(:medium) %>'
          ],
          poster: '<%= @video.video(:thumb) %>',
          title: 'Video 4'
        }
      ];

      // start videos module
      var videosModule = {
        init: function() {
          this.els = {};
          this.cacheElements();
          this.initVideo();
          this.createListOfVideos();
          this.bindEvents();
          this.overwriteConsole();
        },
        overwriteConsole: function() {
          console._log = console.log;
          console.log = this.log;
        },
        log: function(string) {
          videosModule.els.log.append('<p>' + string + '</p>');
          console._log(string);
        },
        cacheElements: function() {
          this.els.$playlist = $('div.playlist > ul');
          this.els.$next = $('#next');
          this.els.$prev = $('#prev');
          this.els.log = $('div.panels > pre');
        },
        initVideo: function() {
          this.player = videojs('video');
          this.player.playList(videos);
        },
        createListOfVideos: function() {
          var html = '';
          for (var i = 0, len = this.player.pl.videos.length; i < len; i++) {
            html += '<li data-videoplaylist="' + i + '">' +
                    '<span class="number">' + (i + 1) + '</span>' +
                    '<span class="poster"><img src="' + videos[i].poster + '"></span>' +
                    '<span class="title">' + videos[i].title + '</span>' +
                    '</li>';
          }
          this.els.$playlist.empty().html(html);
          this.updateActiveVideo();
        },
        updateActiveVideo: function() {
          var activeIndex = this.player.pl.current;

          this.els.$playlist.find('li').removeClass('active');
          this.els.$playlist.find('li[data-videoplaylist="' + activeIndex + '"]').addClass('active');
        },
        bindEvents: function() {
          var self = this;
          this.els.$playlist.find('li').on('click', $.proxy(this.selectVideo, this));
          this.els.$next.on('click', $.proxy(this.nextOrPrev, this));
          this.els.$prev.on('click', $.proxy(this.nextOrPrev, this));
          this.player.on('next', function(e) {
            console.log('Next video');
            self.updateActiveVideo.apply(self);
          });
          this.player.on('prev', function(e) {
            console.log('Previous video');
            self.updateActiveVideo.apply(self);
          });
          this.player.on('lastVideoEnded', function(e) {
            console.log('Last video has finished');
          });
        },
        nextOrPrev: function(e) {
          var clicked = $(e.target);
          this.player[clicked.attr('id')]();
        },
        selectVideo: function(e) {
          var clicked = e.target.nodeName === 'LI' ? $(e.target) : $(e.target).closest('li');

          if (!clicked.hasClass('active')) {
            console.log('Selecting video');
            var videoIndex = clicked.data('videoplaylist');
            this.player.playList(videoIndex);
            this.updateActiveVideo();
          }
        }
      };

      videosModule.init();


    })(jQuery);
  </script>